---

name: build-single-container
description: Build and push a single Docker container image to ghcr.
inputs:
  tag:
    description: The tag and folder for the Docker image/Dockerfile.
    required: true
    type: string
  base:
    description: The parent image tag (optional).
    required: true
    type: string
  github_token:
    description: The GitHub token for authentication.
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx with docker driver
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: alpine-chrome
        tags: type=raw,value=${{ inputs.tag }}
        labels: |
          org.opencontainers.image.documentation=https://github.com/Zoobdude/alpine-chrome/blob/master/README.md
          org.opencontainers.image.vendor=Zoobdude

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.tag }}
        load: true
        labels: ${{ steps.meta.outputs.labels }}
        tags: zoobdude/alpine-chrome:${{ inputs.tag }}

    - name: Test
      env:
        IMAGE_NAME: zoobdude/alpine-chrome:${{ inputs.tag }}
      run: |
        if [[ "${{ inputs.tag }}" == "latest" ]]; then
          ./test.sh
        else
          ${{ inputs.tag }}/test.sh
        fi
      shell: bash

    - name: Compute versioned tag
      id: tag
      env:
        IMAGE_NAME: zoobdude/alpine-chrome:${{ inputs.tag }}
        CHROMIUM_VERSION_REGEXP: 'Chromium ([0-9]+)\.'
        CHROMEDRIVER_VERSION_REGEXP: 'ChromeDriver ([0-9]+)\.'
      run: |
        CURRENT_CHROMIUM_VERSION=$(docker container run --rm --entrypoint '' ${IMAGE_NAME} chromium-browser --version)
        if [[ ${CURRENT_CHROMIUM_VERSION} =~ ${CHROMIUM_VERSION_REGEXP} ]]; then
          echo "ℹ Successfully extracted Chromium major version of ${BASH_REMATCH[1]} from '${CURRENT_CHROMIUM_VERSION}'"
        else
          echo "❌ Cannot extract Chromium major version from '${CURRENT_CHROMIUM_VERSION}'" >&2
          exit 1
        fi
        CHROMIUM_VERSION=${BASH_REMATCH[1]}
        TAG=${CHROMIUM_VERSION}
        if [[ '${{ inputs.folder }}' != '.' ]]; then
          TAG=${TAG}-${{ inputs.tag }}
        fi
        if [[ '${{ inputs.folder }}' == 'with-chromedriver' ]]; then
          CURRENT_CHROMEDRIVER_VERSION=$(docker container run --rm --entrypoint "" ${IMAGE_NAME} chromedriver --version)
          if [[ ${CURRENT_CHROMEDRIVER_VERSION} =~ ${CHROMEDRIVER_VERSION_REGEXP} ]]; then
            CHROMEDRIVER_MAJOR_VERSION=${BASH_REMATCH[1]}
          fi
          if [ "${CHROMIUM_VERSION}" != "${CHROMEDRIVER_MAJOR_VERSION}" ]; then
              echo "Skipping image pushing because of incompatible chromium (${CHROMIUM_VERSION}) and chromedriver (${CHROMEDRIVER_MAJOR_VERSION}) versions" >&2
              exit 1
          fi
        elif [[ '${{ inputs.folder }}' == 'with-selenoid' ]]; then
          CURRENT_SELENOID_VERSION=$(docker container run --rm --entrypoint "" ${IMAGE_NAME} selenoid -version)
          TAG=${TAG}-${CURRENT_SELENOID_VERSION:14:4}
        fi
        echo "value=${TAG}" >> $GITHUB_OUTPUT
      shell: bash


    - name: Login to GitHub Container registry
      if: ${{ github.ref == 'refs/heads/master' }}
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.github_token }}

    - name: Set up Docker Buildx with docker-container driver
      if: ${{ github.ref == 'refs/heads/master' }}
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container

    - name: Build and push
      if: ${{ github.ref == 'refs/heads/master' }}
      env:
        IMAGE_NAME: alpine-chrome:${{ inputs.tag }}
        IMAGE_VERSIONED_NAME: alpine-chrome:${{ steps.tag.outputs.value }}
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.folder }}
        platforms: linux/amd64,linux/arm64
        labels: ${{ steps.meta.outputs.labels }}
        tags: |
          ghcr.io/zoobdude/${{ env.IMAGE_NAME }}
          ghcr.io/zoobdude/${{ env.IMAGE_VERSIONED_NAME }}
        push: true
        cache-from: type=gha
        cache-to: type=gha
